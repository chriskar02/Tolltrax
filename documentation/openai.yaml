openapi: "3.0.3"
info:
  title: Tollway System API
  description: >
    API documentation for the Tollway System. This API supports user authentication,
    administrative operations (resetting stations, passes, users, vehicles, etc.),
    and querying pass data.
  version: "1.0.0"
servers:
  - url: http://localhost:9115/api
    description: Local development server
tags:
  - name: Authentication
    description: Endpoints for user login, token verification, and logout.
  - name: Admin
    description: Administrative endpoints for managing stations, passes, users, vehicles, and database dump.
  - name: Passes
    description: Endpoints to retrieve coverage of toll station passes, perform pass analysis, cost calculations, and charge details.
paths:
  /login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: >
        Accepts form-encoded credentials (username, password) and returns a JSON object
        containing a JWT token on success.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  token:
                    type: string
        '400':
          description: Username and password required.
        '401':
          description: Invalid username or password.
        '500':
          description: Internal server error.
  /verify-token:
    get:
      tags:
        - Authentication
      summary: Verify Token
      description: >
        Verifies the provided token. The client must send the token using the custom header
        X-OBSERVATORY-AUTH.
      parameters:
        - in: header
          name: X-OBSERVATORY-AUTH
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token is valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is valid"
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      type:
                        type: string
        '401':
          description: Authentication token required.
        '403':
          description: Invalid or expired token.
  /logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: >
        Logs out the user. The token to be logged out must be provided in the custom header
        X-OBSERVATORY-AUTH. On success, returns status code 200 with an empty body.
      parameters:
        - in: header
          name: X-OBSERVATORY-AUTH
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Logout successful.
        '401':
          description: Authentication token required.
  /admin/resetstations:
    post:
      tags:
        - Admin
      summary: Reset Stations
      description: >
        Reads toll station data from CSV and resets stations in the database. Accepts an optional
        query parameter to select the output format (json or csv).
      parameters:
        - in: query
          name: format
          schema:
            type: string
            default: "json"
          description: Response format.
      responses:
        '200':
          description: Stations reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  stations:
                    type: array
                    items:
                      type: object
        '500':
          description: Failed to reset stations.
  /admin/resetpasses:
    post:
      tags:
        - Admin
      summary: Reset Passes
      description: >
        Truncates the passthrough and transceiver tables to reset passes.
      responses:
        '200':
          description: Passes reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
        '500':
          description: Failed to reset passes.
  /admin/addpasses:
    post:
      tags:
        - Admin
      summary: Add Passes
      description: >
        Inserts new passes from CSV files and computes debt settlements. Returns the number of new passes.
      responses:
        '200':
          description: Passes added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  newPasses:
                    type: integer
        '500':
          description: Error adding passes.
  /admin/healthcheck:
    get:
      tags:
        - Admin
      summary: Healthcheck
      description: >
        Checks system health by verifying the database connection and returning counts for stations,
        tags, and passes. Accepts an optional query parameter for output format.
      parameters:
        - in: query
          name: format
          schema:
            type: string
            default: "json"
      responses:
        '200':
          description: Healthcheck completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  dbconnection:
                    type: string
                  n_stations:
                    type: integer
                  n_tags:
                    type: integer
                  n_passes:
                    type: integer
        '500':
          description: Healthcheck failed.
  /admin/resetusers:
    post:
      tags:
        - Admin
      summary: Reset Users
      description: >
        Truncates the users table and repopulates it.
      responses:
        '200':
          description: Users reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
        '500':
          description: Failed to reset users.
  /admin/resetvehicles:
    post:
      tags:
        - Admin
      summary: Reset Vehicles
      description: >
        Truncates the vehicles table and repopulates it.
      responses:
        '200':
          description: Vehicles reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
        '500':
          description: Failed to reset vehicles.
  /admin/dbdump:
    post:
      tags:
        - Admin
      summary: Database Dump
      description: >
        Triggers a dump of the database and returns the dump file path.
      responses:
        '200':
          description: Database dump successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  dumpFile:
                    type: string
        '500':
          description: Database dump failed.
  /admin/usermod:
    post:
      tags:
        - Admin
      summary: Modify User
      description: >
        Creates a new user or updates an existing user's password. New users are created with type "normal".
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: User modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  info:
                    type: string
        '400':
          description: Missing username or password.
        '500':
          description: Internal server error.
  /admin/users:
    get:
      tags:
        - Admin
      summary: List Users
      description: Retrieves a list of usernames.
      responses:
        '200':
          description: Successful retrieval.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  usernames:
                    type: array
                    items:
                      type: string
        '500':
          description: Failed to retrieve users.
  /admin/checkAdminStatus:
    get:
      tags:
        - Admin
      summary: Check Admin Status
      description: >
        Checks whether the logged-in user has an admin role. The token must be provided
        in the Authorization header as a Bearer token.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token with a valid JWT.
          schema:
            type: string
      responses:
        '200':
          description: Returns admin status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAdmin:
                    type: boolean
        '500':
          description: Internal server error.
  /tollStationPasses/{tollStationID}/{date_from}/{date_to}:
    get:
      tags:
        - Passes
      summary: Toll Station Passes
      description: >
        Retrieves a list of passes for a given toll station between two dates. Supports an optional query parameter
        for response format.
      parameters:
        - in: path
          name: tollStationID
          required: true
          schema:
            type: string
        - in: path
          name: date_from
          required: true
          schema:
            type: string
            example: "20240101"
        - in: path
          name: date_to
          required: true
          schema:
            type: string
            example: "20240131"
        - in: query
          name: format
          schema:
            type: string
            default: "json"
      responses:
        '200':
          description: Successful retrieval of passes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stationID:
                    type: string
                  stationOperator:
                    type: string
                  requestTimestamp:
                    type: string
                  periodFrom:
                    type: string
                  periodTo:
                    type: string
                  nPasses:
                    type: integer
                  passList:
                    type: array
                    items:
                      type: object
                      properties:
                        passIndex:
                          type: integer
                        passID:
                          type: string
                        timestamp:
                          type: string
                        tagID:
                          type: string
                        tagProvider:
                          type: string
                        passType:
                          type: string
                        passCharge:
                          type: number
        '404':
          description: Toll station not found.
        '500':
          description: Internal server error.
  /passAnalysis/{stationOpID}/{tagOpID}/{date_from}/{date_to}:
    get:
      tags:
        - Passes
      summary: Pass Analysis
      description: >
        Analyzes and returns pass details filtered by station operator and tag operator within the given dates.
      parameters:
        - in: path
          name: stationOpID
          required: true
          schema:
            type: string
        - in: path
          name: tagOpID
          required: true
          schema:
            type: string
        - in: path
          name: date_from
          required: true
          schema:
            type: string
            example: "20240101"
        - in: path
          name: date_to
          required: true
          schema:
            type: string
            example: "20240131"
        - in: query
          name: format
          schema:
            type: string
            default: "json"
      responses:
        '200':
          description: Successful analysis.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stationOpID:
                    type: string
                  tagOpID:
                    type: string
                  requestTimestamp:
                    type: string
                  periodFrom:
                    type: string
                  periodTo:
                    type: string
                  nPasses:
                    type: integer
                  passList:
                    type: array
                    items:
                      type: object
                      properties:
                        passIndex:
                          type: integer
                        passID:
                          type: string
                        stationID:
                          type: string
                        timestamp:
                          type: string
                        tagID:
                          type: string
                        passCharge:
                          type: number
        '500':
          description: Internal server error.
  /passesCost/{tollOpID}/{tagOpID}/{date_from}/{date_to}:
    get:
      tags:
        - Passes
      summary: Passes Cost
      description: >
         Retrieves the total cost and number of passes between two dates for a given toll operator and tag operator.
      parameters:
        - in: path
          name: tollOpID
          required: true
          schema:
            type: string
        - in: path
          name: tagOpID
          required: true
          schema:
            type: string
        - in: path
          name: date_from
          required: true
          schema:
            type: string
            example: "20240101"
        - in: path
          name: date_to
          required: true
          schema:
            type: string
            example: "20240131"
      responses:
        '200':
          description: Successful retrieval.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tollOpID:
                    type: string
                  tagOpID:
                    type: string
                  requestTimestamp:
                    type: string
                  periodFrom:
                    type: string
                  periodTo:
                    type: string
                  nPasses:
                    type: integer
                  passesCost:
                    type: number
        '500':
          description: Internal server error.
  /chargesBy/{tollOpID}/{date_from}/{date_to}:
    get:
      tags:
        - Passes
      summary: Charges By
      description: >
         Retrieves charge details grouped by operator for a given toll operator between the specified dates.
      parameters:
        - in: path
          name: tollOpID
          required: true
          schema:
            type: string
        - in: path
          name: date_from
          required: true
          schema:
            type: string
            example: "20240101"
        - in: path
          name: date_to
          required: true
          schema:
            type: string
            example: "20240131"
      responses:
        '200':
          description: Successful retrieval.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tollOpID:
                    type: string
                  requestTimestamp:
                    type: string
                  periodFrom:
                    type: string
                  periodTo:
                    type: string
                  vOpList:
                    type: array
                    items:
                      type: object
                      properties:
                        visitingOpID:
                          type: string
                        nPasses:
                          type: integer
                        passesCost:
                          type: number
        '500':
          description: Internal server error.
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-OBSERVATORY-AUTH
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
